@startuml

participant "u:Update" as U
participant "Laby:Labyrinthe" as Lab
participant "d:Dijkstra" as Dijkstra
participant "ListeMonstre<Monstre>" as M
participant "g:Graphe" as G

activate U
U->Lab:deplacerMonstre(i)
activate Lab
Lab -> Lab : getProchaineAction(i)
activate Lab
Lab --> Lab : action
Lab ->G:Laby.generergraphe()
activate G
Lab <- G:g:Graphe
deactivate G
Lab -> Dijkstra: resoudre(g,posdepart:String)
activate Dijkstra
Dijkstra --> Lab: Valeur
deactivate Dijkstra
Lab -> M:ListeMonstre.get(i).getX()
activate M
Lab <-- M:X
Lab -> M:ListeMonstre.get(i).getY()
Lab <-- M:Y
deactivate M
Lab -> Lab:getSuivant(x,y,action)
alt (!this.murs[suivante[0]][suivante[1]]) && (!this.getMonstrePresent(suivante[0], suivante[1]))
Lab -> Lab:ListeMonstre.get(i).nouvellePosition(suivante[0], suivante[1])
end
deactivate Lab

Lab --> M: Mise Ã  jour de la position du monstre

deactivate Lab


 @enduml