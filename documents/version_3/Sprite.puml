@startuml
skinparam monochrome true

actor Utilisateur

participant "dessin:LabyDessin" as dessin
participant "Jeu:LabyJeu" as Jeu
participant "laby:Labyrinthe" as laby
participant "sprite:Sprite" as sprite
participant "joueur:Joueur" as joueur
participant "monstres:ArrayList<Monstre>" as monstres
participant "pieces:ArrayList<Piece>" as pieces

Utilisateur -> dessin: dessinerJeu(Jeu, Canvas)
activate dessin
dessin -> Jeu: getLabyrinthe()
activate Jeu
dessin <-- Jeu: Labyrinthe
deactivate Jeu
dessin -> laby: getLengthY()
activate laby
dessin <-- laby: Y (int)
deactivate laby
loop int i, i<Y
    dessin -> laby: getLength()
    activate laby
    dessin <-- laby: i (int)
    deactivate laby
    loop int j, j<X
       dessin -> laby: getMur(i, j)
       activate laby
       dessin <-- laby: boolean
       deactivate laby
       alt true
         Utilisateur <-- dessin: fillRect(int, int, int, int)
         dessin -> sprite: Sprite.MUR
         activate sprite
         dessin <-- sprite: image
         deactivate sprite
         Utilisateur <-- dessin: drawImage(image, int, int)
       end
       dessin -> laby: getJoueur()
       activate laby
       dessin <-- laby: Joueur
       deactivate laby
       dessin -> Joueur: getX()
       activate Joueur
       dessin <-- Joueur: XJoueur
       deactivate Joueur
       dessin -> Joueur: getY()
       activate Joueur
       dessin <-- Joueur: YJoueur
       deactivate Joueur
       alt XJoueur == i && YJoueur == j
         Utilisateur <-- dessin: fillRect(int, int, int, int)
         dessin -> sprite: Sprite.PNJ
         activate sprite
         dessin <-- sprite: image
         deactivate sprite
         Utilisateur <-- dessin: drawImage(image, int, int)
       end
       dessin -> laby: getMonstrePresent(X, Y)
       activate laby
       loop int k, k < laby.listeMonstre.size()
         laby -> monstres: get(k).getX()
         activate monstres
         laby <-- monstres: X
         deactivate monstres
         laby -> monstres: get(k).getY()
         activate monstres
         laby <-- monstres: Y
         deactivate monstres
         alt X==i &&  Y==j
            dessin <-- laby: true
         else
            dessin <-- laby: false
         end
       end
       deactivate laby
       alt true
         Utilisateur <-- dessin: fillRect(int, int, int, int)
         dessin -> sprite: Sprite.MONSTRE
         activate sprite
         dessin <-- sprite: image
         deactivate sprite
         Utilisateur <-- dessin: drawImage(image, int, int)
       end

       dessin -> laby: getPiecePresente(X, Y)
       activate laby
       loop int k, k < laby.listePiece.size()
         laby -> pieces: get(k).getX()
         activate pieces
         laby <-- pieces: X
         deactivate pieces
         laby -> pieces: get(k).getY()
         activate pieces
         laby <-- pieces: Y
         deactivate pieces
         alt X==i &&  Y==j
           dessin <-- laby: true
         else
           dessin <-- laby: false
         end
       end
       deactivate laby
       alt true
         Utilisateur <-- dessin: fillRect(int, int, int, int)
         dessin -> sprite: Sprite.PIECE
         activate sprite
         dessin <-- sprite: image
         deactivate sprite
         Utilisateur <-- dessin: drawImage(image, int, int)
       end




    end
end



@enduml
